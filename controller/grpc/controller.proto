syntax = 'proto3';
package controller;
option go_package = 'main';

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";

service Controller {
  rpc StreamApps (ListAppsRequest) returns (stream ListAppsResponse) {};

  rpc StreamApp (GetAppRequest) returns (stream App) {};

  rpc UpdateApp (UpdateAppRequest) returns (App) {};

  rpc StreamAppRelease(GetAppReleaseRequest) returns (stream Release) {};

  rpc CreateScale (CreateScaleRequest) returns (ScaleRequest) {};

  rpc StreamScaleRequests (ListScaleRequestsRequest) returns (stream ListScaleRequestsResponse) {};

  rpc StreamAppFormation(GetAppFormationRequest) returns (stream Formation) {};

  rpc GetRelease(GetReleaseRequest) returns (Release) {};

  rpc StreamAppLog (StreamAppLogRequest) returns (stream LogChunk) {};

  rpc CreateRelease (CreateReleaseRequest) returns (Release) {};

  rpc StreamDeployments(ListDeploymentsRequest) returns (stream ListDeploymentsResponse) {};

  // TODO(jvatic): Use DeploymentEvent instead of Event
  rpc CreateDeployment (CreateDeploymentRequest) returns (stream Event) {};
}

/*
   Controller service
   */

message ListAppsRequest {
  int32 page_size = 1;
  string page_token = 2;

  // filter out apps containing the following labels
  map<string, string> labels_exclusion_filter = 3;
}

message ListAppsResponse {
  repeated App apps = 1;
  string next_page_token = 2;
}

message GetAppRequest {
  // name = "apps/APP_ID"
  string name = 1;
}

message UpdateAppRequest {
  App app = 1;
  google.protobuf.FieldMask update_mask = 2;
}

// TODO(jvatic): Rename to AppReleaseRequest
message GetAppReleaseRequest {
  // parent = "apps/APP_ID"
  string parent = 1;
}

message CreateScaleRequest {
  // parent = "apps/APP_ID/releases/RELEASE_ID"
  string parent = 1;
  map<string, int32> processes = 2;
  // profobuf doesn't support maps within maps, so map[string]map[string]string
  // could not be reproduced
  map<string, DeploymentProcessTags> tags = 3;
}

message ListScaleRequestsRequest {
  // parent = "apps/APP_ID"
  string parent = 1;
}

message ListScaleRequestsResponse {
  repeated ScaleRequest scale_requests = 1;
  string next_page_token = 2;
}

message GetAppFormationRequest {
  // parent = "apps/APP_ID"
  string parent = 1;
}

message GetReleaseRequest {
  // name = "apps/APP_ID/releases/RELEASE_ID"
  string name = 1;
}

// See github.com/flynn/flynn/logaggregator/types LogOpts
message LogAggregatorLogOpts {
  bool follow = 1;
  // job = "apps/APP_ID/jobs/JOB_ID"
  string job = 2;
  int32 lines = 3;
  string process_type = 4;
  repeated LogAggregatorStreamType stream_types = 5;
}

message StreamAppLogRequest {
  // name = "apps/APP_ID"
  string name = 1;
  LogAggregatorLogOpts opts = 2;
}

message CreateReleaseRequest {
  // parent = "apps/APP_ID"
  string parent = 1;
  Release release = 2;
  string request_id = 3;
}

message ListDeploymentsRequest {
  int32 page_size = 1;
  string page_token = 2;
  string parent = 3;
  ReleaseType filter_type = 4;
}

message ListDeploymentsResponse {
  repeated ExpandedDeployment deployments = 1;
  string next_page_token = 2;
}

message CreateDeploymentRequest {
  // parent = "apps/APP_ID"
  string parent = 1;
  // release = Release.name
  string release = 2;
  string request_id = 3;
  // optional scale request
  CreateScaleRequest scale_request = 4;
}

/*
   Controller message types
   */

message App {
  // name = "apps/APP_ID"
  string name = 1;
  string display_name = 2;
  map<string, string> labels = 3;
  google.protobuf.Timestamp create_time = 4;
  google.protobuf.Timestamp update_time = 5;
  int32 deploy_timeout = 6;
  string strategy = 7;
  // release = Release.name
  string release = 8;
}

// See github.com/flynn/flynn/host/types Mount
message HostHealthCheck {
  // Type is one of tcp, http, https
  string type = 1;
  // Interval is the time to wait between checks after the service has been
  // marked as up. It defaults to two seconds.
  google.protobuf.Duration interval = 3;
  // Threshold is the number of consecutive checks of the same status before
  // a service will be marked as up or down after coming up for the first
  // time. It defaults to 2.
  int32 threshold = 4;
  // If KillDown is true, the job will be killed if the service goes down (or
  // does not come up)
  bool kill_down = 5;
  // StartTimeout is the maximum duration that a service can take to come up
  // for the first time if KillDown is true. It defaults to ten seconds.
  google.protobuf.Duration start_timeout = 6;

  // Extra optional config fields for http/https checks
  string path = 7;
  string host = 8;
  string match = 9;
  int32 status = 10;
}

// See github.com/flynn/flynn/host/types Mount
message HostService {
  string display_name = 1;
  // Create the service in service discovery
  bool create = 2;
  HostHealthCheck check = 3;
}

message Port {
  int32 port = 1;
  string proto = 2;
  HostService service = 3;
}

message VolumeReq {
  string path = 1;
  bool delete_on_stop = 2;
}

// See github.com/flynn/flynn/host/resource Spec
message HostResourceSpec {
  // Request, if set, is the amount of resource a job expects to consume,
  // so the job should only be placed on a host with at least this amount
  // of resource available, and once scheduled this amount of resource
  // should then be unavailable on the given host.
  int64 request = 1;
  // Limit, if set, is an upper limit on the amount of resource a job can
  // consume, the outcome of hitting this limit being implementation
  // defined (e.g. a system error, throttling, catchable / uncatchable
  // signals etc.)
  int64 limit = 2;
}

// See github.com/flynn/flynn/host/types Mount
message HostMount {
  string location = 1;
  string target = 2;
  bool writable = 3;
  string device = 4;
  string data = 5;
  int32 flags = 6;
}

// See github.com/opencontainers/runc/libcontainer/configs Device
message LibContainerDevice {
  // Device type, block, char, etc.
  int32 type = 1;
  // Path to the device.
  string path = 2;
  // Major is the device's major number.
  int64 major = 3;
  // Minor is the device's minor number.
  int64 minor = 4;
  // Cgroup permissions format, rwm.
  string permissions = 5;
  // FileMode permission bits for the device.
  uint32 file_mode = 6;
  // Uid of the device.
  uint32 uid = 7;
  // Gid of the device.
  uint32 gid = 8;
  // Write the file to the allowed list
  bool allow = 9;
}

message ProcessType {
  repeated string args = 1;
  map<string, string> env = 2;
  repeated Port ports = 3;
  repeated VolumeReq volumes = 4;
  bool omni = 5;
  bool host_network = 6;
  bool host_pid_namespace = 7;
  string service = 8;
  bool resurrect = 9;
  map<string, HostResourceSpec> resources = 10;
  repeated HostMount mounts = 11;
  repeated string linux_capabilities = 12;
  repeated LibContainerDevice allowed_devices = 13;
  bool writeable_cgroups = 14;
}

enum ReleaseType {
  ANY = 0;
  CODE = 1;
  CONFIG = 2;
}

message Release {
  // name = "apps/APP_ID/releases/RELEASE_ID"
  string name = 1;
  repeated string artifacts = 3;
  map<string, string> env = 4;
  map<string, string> labels = 5;
  map<string, ProcessType> processes = 6;
  ReleaseType type = 7;
  google.protobuf.Timestamp create_time = 8;
}

enum ScaleRequestState {
  SCALE_PENDING = 0;
  SCALE_CANCELLED = 1;
  SCALE_COMPLETE = 2;
}

message ScaleRequest {
  // parent = "apps/APP_ID/releases/RELEASE_ID"
  string parent = 1;
  // name = "apps/APP_ID/releases/RELEASE_ID/scale/SCALE_REQUEST_ID"
  string name = 2;
  ScaleRequestState state = 3;
  map<string, int32> old_processes = 4;
  map<string, int32> new_processes = 5;
  // profobuf doesn't support maps within maps, so map[string]map[string]string
  // could not be reproduced
  map<string, DeploymentProcessTags> old_tags = 6;
  map<string, DeploymentProcessTags> new_tags = 7;
  google.protobuf.Timestamp create_time = 8;
  google.protobuf.Timestamp update_time = 9;
}

message Formation {
  // parent = "apps/APP_ID/releases/RELEASE_ID"
  string parent = 1;
  // name = "apps/APP_ID/releases/RELEASE_ID/scale/SCALE_REQUEST_ID"
  string scale_request = 2;
  ScaleRequestState state = 3;
  map<string, int32> processes = 4;
  // profobuf doesn't support maps within maps, so map[string]map[string]string
  // could not be reproduced
  map<string, DeploymentProcessTags> tags = 5;
  google.protobuf.Timestamp create_time = 6;
  google.protobuf.Timestamp update_time = 7;
}

// See github.com/flynn/flynn/logaggregator NewMessageFromSyslog
enum LogAggregatorStreamSource {
  APP = 0;
}

// See github.com/flynn/flynn/logaggregator/types StreamType
enum LogAggregatorStreamType {
  STDOUT = 0;
  STDERR = 1;
  INIT = 2;
  UNKNOWN = 3;
}

// See github.com/flynn/flynn/logaggregator/client Message
message LogChunk {
  // host = "hosts/HOST_ID"
  // host is the host that the job was running on when this log message was
  // emitted.
  string host = 1;
  // job_id = "apps/APP_ID/jobs/JOB_ID"
  string job = 2;
  // msg is the actual content of this log message.
  string msg = 3;
  // process_type is the type of process that emitted this log message.
  string process_type = 4;
  // source is the source of this log message.
  LogAggregatorStreamSource source = 5;
  // stream is the I/O stream that emitted this message, such as "stdout" or
  // "stderr".
  LogAggregatorStreamType stream = 6;
  // create_time is the time that this log line was emitted.
  google.protobuf.Timestamp create_time = 7;
}

enum DeploymentStatus {
  PENDING = 0;
  FAILED = 1;
  RUNNING = 2;
  COMPLETE = 3;
}

message DeploymentProcessTags {
  map<string, string> tags = 1;
}

message Deployment {
  // name = "apps/APP_ID/deployments/DEPLOYMENT_ID"
  string name = 1;
  // old_release = Release.name
  string old_release = 3;
  // new_release = Release.name
  string new_release = 4;
  string strategy = 5;
  DeploymentStatus status = 6;
  map<string, int32> processes = 7;
  // profobuf doesn't support maps within maps, so map[string]map[string]string
  // could not be reproduced
  map<string, DeploymentProcessTags> tags = 8;
  int32 deploy_timeout = 9;
  google.protobuf.Timestamp create_time = 10;
  google.protobuf.Timestamp expire_time = 11;
  google.protobuf.Timestamp end_time = 12;
}

message ExpandedDeployment {
  // name = "apps/APP_ID/deployments/DEPLOYMENT_ID"
  string name = 1;
  // old_release = Release.name
  Release old_release = 3;
  // new_release = Release.name
  Release new_release = 4;
  ReleaseType type = 5;
  string strategy = 6;
  DeploymentStatus status = 7;
  map<string, int32> processes = 8;
  // profobuf doesn't support maps within maps, so map[string]map[string]string
  // could not be reproduced
  map<string, DeploymentProcessTags> tags = 9;
  int32 deploy_timeout = 10;
  google.protobuf.Timestamp create_time = 11;
  google.protobuf.Timestamp expire_time = 12;
  google.protobuf.Timestamp end_time = 13;
}

message DeploymentEvent {
  Deployment deployment = 1;
  string job_type = 2;
  enum JobState {
    PENDING = 0;
    BLOCKED = 1;
    STARTING = 2;
    UP = 3;
    STOPPING = 5;
    DOWN = 6;

    // CRASHED and FAILURE are no longer valid job states,
    // but we still need to handle them in case they are set by old
    // schedulers still using the legacy code.
    CRASHED = 7;
    FAILED = 8;
  }
  JobState job_state = 3;
}

message Event {
  DeploymentEvent deployment_event = 1;
  string Error = 2;
  google.protobuf.Timestamp create_time = 3;
}
